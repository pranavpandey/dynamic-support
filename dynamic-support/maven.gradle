/*
 * Copyright 2018-2024 Pranav Pandey
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'maven-publish'
apply plugin: 'signing'

group = mavenGroup
version = mavenVersion

// Android libraries
if (project.hasProperty("android")) {
    tasks.register('sourcesJar', Jar) {
        archiveClassifier.set("sources")
        from android.sourceSets.main.java.srcDirs
    }

    tasks.register('javadoc', Javadoc) {
        dependsOn "generateReleaseRFile"
        title "${referenceTitle}<h4>${versionDesc}</h4><h5>${mavenVersion}</h5>"
        failOnError = false

        source = android.sourceSets.main.java.sourceFiles
        doNotTrackState("Javadoc needs to be generated every time.")

        if (JavaVersion.current().isJava8Compatible()) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }

        options.memberLevel = JavadocMemberLevel.PROTECTED
        exclude "**/R", "**/R.**", "**/R\$**", "**/BuildConfig*"

        options.windowTitle = "${referenceTitle}"
        options.links('http://docs.oracle.com/javase/8/docs/api',
                'http://docs.oracle.com/javase/17/docs/api')
        options.links('https://developer.android.com/reference')
        options.linksOffline('https://developer.android.com/reference',
                'https://developer.android.com/reference/androidx')
        options.linksOffline('https://developer.android.com/reference',
                'https://developer.android.com/reference/com/google/android/material')
        options.links('https://javadoc.io/doc/com.google.code.gson/gson/latest')
        options.links('https://pranavpandey.org/dynamic-utils')
        options.links('https://pranavpandey.org/dynamic-theme')
        options.links('https://pranavpandey.org/dynamic-locale')
        options.links('https://pranavpandey.org/dynamic-preferences')
        options.links('https://pranavpandey.org/dynamic-toasts')
    }
} else { // Java libraries
    tasks.register('sourcesJar', Jar) {
        dependsOn classes

        archiveClassifier.set("sources")
        from sourceSets.main.allSource
    }
}

tasks.register('javadocJar', Jar) {
    dependsOn javadoc

    archiveClassifier.set("javadoc")
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

// Maven
publishing {
    publications {
        library(MavenPublication) {
            groupId mavenGroup
            artifactId mavenArtifactId
            version mavenVersion

            artifact "$buildDir/outputs/aar/$mavenArtifactId-release.aar"
            artifact javadocJar
            artifact sourcesJar

            pom.withXml {
                // Project
                asNode().appendNode('name', projectName)
                asNode().appendNode('description', projectDesc)
                asNode().appendNode('url', siteUrl)
                asNode().appendNode('inceptionYear', mavenInceptionYear)

                // Licenses
                def license = asNode().appendNode('licenses').appendNode('license')
                license.appendNode('name', licenseName)
                license.appendNode('url', licenseUrl)
                license.appendNode('distribution', licenseDistribution)

                // Developers
                def developer = asNode().appendNode('developers').appendNode('developer')
                developer.appendNode('id', developerId)
                developer.appendNode('name', developerName)
                developer.appendNode('email', developerEmail)

                // SCM
                def scm = asNode().appendNode('scm')
                scm.appendNode('connection', "scm:git:${gitUrl}.git")
                scm.appendNode('developerConnection', gitUrl)
                scm.appendNode('url', siteUrl)

                // Dependencies
                def dependenciesNode = asNode()['dependencies'][0]
                if (dependenciesNode == null) {
                    dependenciesNode = asNode().appendNode('dependencies')
                }

                // Add all that are 'compile' dependencies.
                configurations.api.allDependencies.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.group)
                    dependencyNode.appendNode('artifactId', it.name)
                    dependencyNode.appendNode('version', it.version)
                }
            }
        }
    }
}

ext["signing.keyId"] = rootProject.ext["signing.keyId"]
ext["signing.password"] = rootProject.ext["signing.password"]
ext["signing.secretKeyRingFile"] = rootProject.ext["signing.secretKeyRingFile"]

signing {
    sign publishing.publications
}

afterEvaluate { project ->
    // Fix javadoc generation.
    javadoc.classpath += files(android.libraryVariants.collect { variant ->
        variant.javaCompileProvider.get().classpath.files
    })

    def pomTask = "generatePomFileForLibraryPublication"
    def dependencies = [javadocJar, sourcesJar, assembleRelease, pomTask]

    // Convenience task to prepare everything we need for releases.
    tasks.register('prepareArtifacts') {
        dependsOn dependencies
    }
}
