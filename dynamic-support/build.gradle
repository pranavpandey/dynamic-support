/*
 * Copyright 2018-2023 Pranav Pandey
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'com.android.library'

android {
    compileSdkVersion versions.compileSdk
    buildToolsVersion versions.buildTools

    defaultConfig {
        minSdkVersion versions.minSdk
        targetSdkVersion versions.targetSdk
        namespace 'com.pranavpandey.android.dynamic.support'

        vectorDrawables.useSupportLibrary = true
        consumerProguardFiles 'proguard-rules.pro'
    }

    sourceSets {
        main.res.srcDirs 'res'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    lintOptions {
        abortOnError false
    }
}

dependencies {
    implementation(platform("org.jetbrains.kotlin:kotlin-bom:${versions.kotlin}"))

    api "com.pranavpandey.android:dynamic-utils:${versions.dynamic}"
    api "com.pranavpandey.android:dynamic-theme:${versions.theme}"
    api "com.pranavpandey.android:dynamic-locale:${versions.locale}"
    api "com.pranavpandey.android:dynamic-preferences:${versions.preferences}"
    api "com.pranavpandey.android:dynamic-toasts:${versions.toasts}"
    api "androidx.fragment:fragment:${versions.fragment}"
    api "androidx.swiperefreshlayout:swiperefreshlayout:${versions.swiperefresh}"
    api "androidx.work:work-runtime:${versions.work}"
    api "com.google.android.flexbox:flexbox:${versions.flexbox}"
    api "com.google.android.material:material:${versions.material}"
}

if (project.rootProject.file("${publication}").exists()) {
    apply from: 'maven.gradle'
}

task generateJavadoc() {
    description "Generates Javadoc."
}

project.afterEvaluate {
    android.libraryVariants.all { variant ->
        def task = project.tasks.create("generate${variant.name.capitalize()}Javadoc", Javadoc) {
            title "${referenceTitle}"
            description "Generates Javadoc for $variant.name."
            destinationDir = new File(destinationDir, variant.baseName)

            source = variant.sourceSets.collect { it.java.sourceFiles }.inject { m, i -> m + i }
            doFirst {
                classpath = project.files(variant.javaCompileProvider.get().classpath.files,
                        project.android.getBootClasspath())
            }

            if (JavaVersion.current().isJava8Compatible()) {
                options.addStringOption('Xdoclint:none', '-quiet')
            }

            exclude "**/R", "**/R.**", "**/R\$**", "**/BuildConfig*"

            if (JavaVersion.current().isJava8Compatible()) {
                options.addStringOption('Xdoclint:none', '-quiet')
            }

            options.windowTitle = "${referenceTitle}"
            options.footer = "<h5>${mavenVersion}</h5>"
            options.links('http://docs.oracle.com/javase/8/docs/api')
            options.links('https://developer.android.com/reference')
            options.memberLevel = JavadocMemberLevel.PROTECTED

            failOnError false
        }

        task.dependsOn "assemble${variant.name.capitalize()}"
        generateJavadoc.dependsOn task
    }
}
